services:
  stock-publisher:
    build: ./stock-publisher
    container_name: stock-publisher
    restart: always
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
      - TICKER_INTERVAL=1
  stock-liveview:
    build: ./stock-liveview
    container_name: stock-liveview
    restart: always
    ports:
      - "3000:3000"
    environment:
      - MONGODB_URL=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DB=stockmarket
      - MONGODB_COLLECTION=stocks
      - NODE_ENV=development
      - PORT=3000
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 5672:5672
      - 15672:15672
  mongo1:
    image: mongo:7.0
    container_name: mongodb1
    restart: always
    ports:
      - 27017:27017
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  mongo2:
    image: mongo:7.0
    container_name: mongodb2
    restart: always
    ports:
      - 27018:27017
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"

  mongo3:
    image: mongo:7.0
    container_name: mongodb3
    restart: always
    ports:
      - 27019:27017
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"

  aapl-consumer:
    build: ./aapl-consumer
    container_name: aapl-consumer
    restart: always
    depends_on:
      - rabbitmq
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - MONGODB_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DB=stockmarket
      - MONGODB_COLLECTION=stocks

  msft-consumer:
    build: ./msft-consumer
    container_name: msft-consumer
    restart: always
    depends_on:
      - rabbitmq
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - MONGODB_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DB=stockmarket
      - MONGODB_COLLECTION=stocks

  tsla-consumer:
    build: ./tsla-consumer
    container_name: tsla-consumer
    restart: always
    depends_on:
      - rabbitmq
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - MONGODB_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DB=stockmarket
      - MONGODB_COLLECTION=stocks

volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:


